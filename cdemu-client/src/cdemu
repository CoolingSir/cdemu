#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# cdemu: command-line CDEmu client
# Copyright (C) 2006-2014 Rok Mandeljc
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

from __future__ import print_function

import argparse
import sys
import os.path
import getpass
import dbus

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import xml.etree.ElementTree as elementtree

from gettext import gettext as _
from gettext import bindtextdomain, textdomain

# *** Globals ***
app_name = "cdemu-client"
app_version = "2.1.1"
supported_daemon_interface_version = 6

# I18n
bindtextdomain(app_name)
textdomain(app_name)


########################################################################
#                            Terminal colors                           #
########################################################################
# attrs is a comma separated list of integers, where valid values include
# foreground: 30-37, background: 40-47, reset: 0, bold: 1. (ECMA-48 / VT102)
def set_terminal_color(stream, *attrs):
    if stream.isatty():
        attrs_str = ";".join(map(str, attrs))
        stream.write("\x1b[%sm" % (attrs_str))

def print_header (message):
    set_terminal_color(sys.stdout, 1, 34)
    print(message, file=sys.stdout)
    set_terminal_color(sys.stdout, 0)

def print_error (message):
    set_terminal_color(sys.stderr, 1, 31)
    print(_("ERROR: %s") % (message), file=sys.stderr)
    set_terminal_color(sys.stderr, 0)

def print_warning (message):
    set_terminal_color(sys.stdout, 1, 33)
    print(_("WARNING: %s") % (message), file=sys.stdout)
    set_terminal_color(sys.stdout, 0)


########################################################################
#                                 Error                                #
########################################################################
class CDEmuError (Exception): pass
class CDEmuParserError (Exception): pass

########################################################################
#                              Load device                             #
########################################################################
class cmd_load (object):
    def __init__ (self, subparsers):
        name = "load"
        description_msg = _("")
        help_msg = _("loads an image to the device")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("image_file", type=str, nargs="+", help=_("image file(s)"))
        parser.add_argument("--password", type=str, help=_("password for encrypted images"))
        parser.add_argument("--encoding", type=str, help=_("encoding for text-based images"))
        parser.add_argument("--dvd-report-css", action="store_true", help=_("flag the DVD disc as CSS-encoded"))

    def __call__ (self, dbus_iface, arguments):
        # We need to pass absolute filenames to daemon
        filenames = map(os.path.abspath, arguments.image_file)

        # Gather parser parameters into a dictionary
        parser_params = {}
        if hasattr(arguments, "encoding"):
            parser_params["encoding"] = arguments.encoding
        if hasattr(arguments, "password"):
            parser_params["password"] = arguments.password
        if hasattr(arguments, "dvd_report_css"):
            parser_params["dvd-report-css"] = arguments.dvd_report_css

        # Particular device vs. any device
        if arguments.device == "any":
            try:
                num_devices = dbus_iface.GetNumberOfDevices()
            except dbus.DBusException as e:
                raise CDEmuError(_("Failed to get number of devices: %s") % (e))

            for device in range(0, num_devices):
                # Device's status
                try:
                    status = dbus_iface.DeviceGetStatus(device)
                except dbus.DBusException as e:
                    print_warning(_("Failed to get status of device %i: %s") % (device, e))
                    continue

                # If device is already loaded, skip it
                if status[0]:
                    continue

                # Load device
                return self.load_device(dbus_iface, device, filenames, parser_params)
            else:
                # If we're here, it means we didn't get an empty device
                raise CDEmuError(_("No empty device found"))
        else:
            try:
                device = int(arguments.device, 0)
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

            return self.load_device(dbus_iface, device, filenames, parser_params)

    # Device loading with password query support
    def load_device (self, dbus_iface, device, filenames, params={}):
        # Try to load it
        try:
            dbus_iface.DeviceLoad(device, filenames, params)
        except dbus.DBusException as e:
            if e.get_dbus_name() == "net.sf.cdemu.CDEmuDaemon.errorMirage.EncryptedImage":
                # We need password
                print(_("The image you are trying to load is encrypted."))
                params["password"] = getpass.getpass(_("Password: ")) # Append password to params
                return load_device(device, filenames, params)
            else:
                raise CDEmuError(_("Failed to load image: %s") % (e))


########################################################################
#                              Create blank                            #
########################################################################
class cmd_create_blank (object):
    def __init__ (self, subparsers):
        name = "create-blank"
        description_msg = _("")
        help_msg = _("load blank/recordable image to the device")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("image_file", type=str, nargs="+", help=_("image file(s)"))
        parser.add_argument("--writer-id", type=str, nargs="?", required=True, help=_("ID of image writer to use"))
        parser.add_argument("--medium-type", type=str, nargs="?", choices=['cd', 'dvd'], help=_("medium type"))
        parser.add_argument("--param", type=str, nargs="?", action='append', help=_("additional writer parameter(s)"))

    def __call__ (self, dbus_iface, arguments):
        # We need to pass absolute filenames to daemon
        filenames = map(os.path.abspath, arguments.image_file)

        print(arguments)

        # Gather parser parameters into a dictionary
        writer_params = {}
        if hasattr(arguments, "writer_id"):
            writer_params["writer-id"] = arguments.writer_id
        if hasattr(arguments, "medium_type"):
            writer_params["medium-type"] = arguments.medium_type
        if hasattr(arguments, "param"):
            print_warning("FIXME: writer parameter handling!")
            print(arguments)

        # Particular device vs. any device
        if arguments.device == "any":
            try:
                num_devices = dbus_iface.GetNumberOfDevices()
            except dbus.DBusException as e:
                raise CDEmuError(_("Failed to get number of devices: %s") % (e))

            for device in range(0, num_devices):
                # Device's status
                try:
                    status = dbus_iface.DeviceGetStatus(device)
                except dbus.DBusException as e:
                    print_warning(_("Failed to get status of device %i: %s") % (device, e))
                    continue

                # If device is already loaded, skip it
                if status[0]:
                    continue

                # Load device
                return self.load_device(dbus_iface, device, filenames, writer_params)
            else:
                # If we're here, it means we didn't get an empty device
                raise CDEmuError(_("No empty device found"))
        else:
            try:
                device = int(arguments.device, 0)
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

            return self.load_device(dbus_iface, device, filenames, writer_params)

    # Device loading
    def load_device (self, dbus_iface, device, filenames, params={}):
        print(params)
        # Try to load it
        try:
            dbus_iface.DeviceCreateBlank(device, filenames, params)
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to load blank image: %s") % (e))


########################################################################
#                             Unload device                            #
########################################################################
class cmd_unload (object):
    def __init__ (self, subparsers):
        name = "unload"
        description_msg = _("")
        help_msg = _("unloads the device")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))

    def __call__ (self, dbus_iface, arguments):
        # Particular device vs. all devices
        if arguments.device == "all":
            try:
                num_devices = dbus_iface.GetNumberOfDevices()
            except dbus.DBusException as e:
                raise CDEmuError(_("Failed to get number of devices: %s") % (e))

            for device in range(0, num_devices):
                try:
                    dbus_iface.DeviceUnload(device)
                except dbus.DBusException as e:
                    print_warning(_("Failed to unload device %i: %s") % (device, e))
                    continue
        else:
            try:
                device = int(arguments.device, 0)
                dbus_iface.DeviceUnload(device)
            except dbus.DBusException as e:
                raise CDEmuError(_("Failed to unload device %i: %s") % (device, e))
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.device))


########################################################################
#                            Display status                            #
########################################################################
class cmd_display_status (object):
    def __init__ (self, subparsers):
        name = "status"
        description_msg = _("")
        help_msg = _("displays the devices' status")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Print status for all devices
        try:
            num_devices = dbus_iface.GetNumberOfDevices()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to get number of devices: %s") % (e))

        print_header(_("Devices' status:"))
        print("%-5s %-10s %s" % (_("DEV"), _("LOADED"), _("FILENAME")))
        for device in range (0, num_devices):
            try:
                [loaded, filenames] = dbus_iface.DeviceGetStatus(device, utf8_strings=True)
            except dbus.DBusException as e:
                print_warning(_("Failed to get status of device %i: %s") % (device, e))
                continue

            if not loaded:
                filenames = [ "" ]

            # First line is for all device's data, the rest are for additional filenames
            print("%-5s %-10s %s" % (device, loaded, filenames[0]))
            for filename in filenames[1:]:
                print("%-5s %-10s %s" % ("", "", filename))


########################################################################
#                            Device mapping                            #
########################################################################
class cmd_device_mapping (object):
    def __init__ (self, subparsers):
        name = "device-mapping"
        description_msg = _("")
        help_msg = _("displays the device mapping information")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Print device mapping for all devices
        try:
            num_devices = dbus_iface.GetNumberOfDevices()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to get number of devices: %s") % (e))

        print_header(_("Device mapping:"))
        print("%-5s %-15s %-15s" % (_("DEV"), _("SCSI CD-ROM"), _("SCSI generic")))
        for device in range (0, num_devices):
            try:
                [dev_sr, dev_sg] = dbus_iface.DeviceGetMapping(device)
            except dbus.DBusException as e:
                print_warning(_("Failed to get device mapping of device %i: %s") % (device, e))
                continue

            print("%-5s %-15s %-15s" % (device, dev_sr, dev_sg))


########################################################################
#                           Daemon debug mask                          #
########################################################################
class cmd_daemon_debug_mask (object):
    def __init__ (self, subparsers):
        name = "daemon-debug-mask"
        description_msg = _("")
        help_msg = _("displays/sets daemon debug mask")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_value", nargs="?", type=str, help=_("new value"))
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Set daemon debug mask
        if hasattr(arguments, "new_value"):
            try:
                mask = int(arguments.new_value, 0)
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.new_value))

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting daemon debug mask of all devices to 0x%X.") % (mask))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "daemon-debug-mask", mask)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set daemon debug mask of device %i to 0x%X: %s") % (device, mask, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting daemon debug mask of device %i to 0x%X.") % (device, mask))
                try:
                    dbus_iface.DeviceSetOption(device, "daemon-debug-mask", mask)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set daemon debug mask of device %i to 0x%X: %s") % (device, mask, e))

        # Get daemon debug mask
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print_header(_("Devices' daemon debug masks:"))
                print("%-5s %-10s" % (_("DEV"), _("DEBUG MASK")))

                for device in range(0, num_devices):
                    try:
                        mask = dbus_iface.DeviceGetOption(device, "daemon-debug-mask")
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get daemon debug mask of device %i: %s") % (device, e))
                        continue

                    print("%-5s 0x%08X" % (device, mask))
            else:
                try:
                    device = int(arguments.device, 0)
                    mask = dbus_iface.DeviceGetOption(device, "daemon-debug-mask")
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get daemon debug mask of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Daemon debug mask of device %i: 0x%X") % (device, mask))


########################################################################
#                          Library debug mask                          #
########################################################################
class cmd_library_debug_mask (object):
    def __init__ (self, subparsers):
        name = "library-debug-mask"
        description_msg = _("")
        help_msg = _("displays/sets library debug mask")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_value", nargs="?", type=str, help=_("new value"))

    def __call__ (self, dbus_iface, arguments):
        # Set debug mask
        if hasattr(arguments, "new_value"):
            try:
                mask = int(arguments.new_value, 0)
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.new_value))

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting library debug mask of all devices to 0x%X.") % (mask))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "library-debug-mask", mask)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set library debug mask of device %i to 0x%X: %s") % (device, mask, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting library debug mask of device %i to 0x%X.") % (device, mask))
                try:
                    dbus_iface.DeviceSetOption(device, "library-debug-mask", mask)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set library debug mask of device %i to 0x%X: %s") % (device, mask, e))

        # Get debug mask
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print_header(_("Devices' library debug masks:"))
                print("%-5s %-10s" % (_("DEV"), _("DEBUG MASK")))

                for device in range(0, num_devices):
                    try:
                        mask = dbus_iface.DeviceGetOption(device, "library-debug-mask")
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get library debug mask of device %i: %s") % (device, e))

                    print("%-5s 0x%08X" % (device, mask))
            else:
                try:
                    device = int(arguments.device, 0)
                    mask = dbus_iface.DeviceGetOption(device, "library-debug-mask")
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get library debug mask of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (mask))

                print(_("Library debug mask of device %i: 0x%X") % (device, mask))


########################################################################
#                            DPM emulation                            #
########################################################################
class cmd_dpm_emulation (object):
    def __init__ (self, subparsers):
        name = "dpm-emulation"
        description_msg = _("")
        help_msg = _("displays/sets DPM emulation flag")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_value", nargs="?", type=str, help=_("new value"))

    def __call__ (self, dbus_iface, arguments):
        # Set DPM emulation flag
        if hasattr(arguments, "new_value"):
            try:
                enabled = arguments.new_value.lower() in ("yes", "true", "t", "1")
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments.new_value))

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting DPM emulation flag of all devices to %i.") % (enabled))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "dpm-emulation", enabled)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set DPM emulation flag of device %i to %i: %s") % (device, enabled, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting DPM emulation flag of device %i to %i.") % (device, enabled))
                try:
                    dbus_iface.DeviceSetOption(device, "dpm-emulation", enabled)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set DPM emulation flag of device %i to %i: %s") % (device, enabled, e))

        # Get DPM emulation flag
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print_header(_("Devices' DPM emulation flag:"))
                print("%-5s %-10s" % (_("DEV"), _("ENABLED")))

                for device in range(0, num_devices):
                    try:
                        enabled = dbus_iface.DeviceGetOption(device, "dpm-emulation")
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get DPM emulation flag of device %i: %s") % (device, e))
                        continue

                    print("%-5s %i" % (device, enabled))
            else:
                try:
                    device = int(arguments.device, 0)
                    enabled = dbus_iface.DeviceGetOption(device, "dpm-emulation")
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get DPM emulation flag of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("DPM emulation flag of device %i: %i") % (device, enabled))


########################################################################
#                        Transfer rate emulation                       #
########################################################################
class cmd_tr_emulation (object):
    def __init__ (self, subparsers):
        name = "tr-emulation"
        description_msg = _("")
        help_msg = _("displays/sets transfer rate emulation flag")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.register("type", "string_boolean", lambda v: v.lower() in ("yes", "true", "t", "1"))

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_value", nargs="?", type=str, help=_("new value"))

    def __call__ (self, dbus_iface, arguments):
        # Set TR emulation flag
        if hasattr(arguments, "new_value"):
            try:
                enabled = arguments.new_value.lower() in ("yes", "true", "t", "1")
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments[1]))

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting transfer rate emulation flag of all devices to %i.") % (enabled))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "tr-emulation", enabled)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set transfer rate emulation flag of device %i to %i: %s") % (device, enabled, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting transfer rate emulation flag of device %i to %i.") % (device, enabled))
                try:
                    dbus_iface.DeviceSetOption(device, "tr-emulation", enabled)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set transfer rate emulation flag of device %i to %i: %s") % (device, enabled, e))

        # Get TR emulation flag
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Devices' transfer rate emulation flag:"))
                print("%-5s %-10s" % (_("DEV"), _("ENABLED")))

                for device in range(0, num_devices):
                    try:
                        enabled = dbus_iface.DeviceGetOption(device, "tr-emulation")
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get transfer rate emulation flag of device %i: %s") % (device, e))
                        continue

                    print("%-5s %i" % (device, enabled))
            else:
                try:
                    device = int(arguments.device, 0)
                    enabled = dbus_iface.DeviceGetOption(device, "tr-emulation")
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get transfer rate emulation flag of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Transfer rate emulation flag of device %i: %i") % (device, enabled))


########################################################################
#                         Bad sector emulation                         #
########################################################################
class cmd_bad_sector_emulation (object):
    def __init__ (self, subparsers):
        name = "bad-sector-emulation"
        description_msg = _("")
        help_msg = _("displays/sets bad sector emulation flag")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_value", nargs="?", type=str, help=_("new value"))

    def __call__ (self, dbus_iface, arguments):
        # Set bad sector emulation flag
        if hasattr(arguments, "new_value"):
            try:
                enabled = arguments.new_value.lower() in ("yes", "true", "t", "1")
            except ValueError:
                raise CDEmuError(_("String '%s' is not a number") % (arguments[1]))

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting bad sector emulation flag of all devices to %i.") % (enabled))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "bad-sector-emulation", enabled)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set bad sector emulation flag of device %i to %i: %s") % (device, enabled, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting bad sector emulation flag of device %i to %i.") % (device, enabled))
                try:
                    dbus_iface.DeviceSetOption(device, "bad-sector-emulation", enabled)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set bad sector emulation flag of device %i to %i: %s") % (device, enabled, e))

        # Get bad sector emulation flag
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print_header(_("Devices' bad sector emulation flag:"))
                print("%-5s %-10s" % (_("DEV"), _("ENABLED")))

                for device in range(0, num_devices):
                    try:
                        enabled = dbus_iface.DeviceGetOption(device, "bad-sector-emulation")
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get bad sector emulation flag of device %i: %s") % (device, e))
                        continue

                    print("%-5s %i" % (device, enabled))
            else:
                try:
                    device = int(arguments.device, 0)
                    enabled = dbus_iface.DeviceGetOption(device, "bad-sector-emulation")
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get bad sector emulation flag of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Bad sector emulation flag of device %i: %i") % (device, enabled))


########################################################################
#                               Device ID                              #
########################################################################
class cmd_device_id (object):
    def __init__ (self, subparsers):
        name = "device-id"
        description_msg = _("")
        help_msg = _("displays/sets device ID")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("device", type=str, help=_("device"))
        parser.add_argument("new_id", nargs="?", action=ActionDeviceId, type=str, help=_("new device ID: vendor ID, product ID, revision and vendor-specific string"))

    def __call__ (self, dbus_iface, arguments):
        # Set device ID
        if hasattr(arguments, "new_id"):
            device_id = arguments.new_id

            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print(_("Setting device ID of all devices to %s.") % (device_id))
                for device in range(0, num_devices):
                    try:
                        dbus_iface.DeviceSetOption(device, "device-id", device_id)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to set device ID of device %i to %s: %s") % (device, device_id, e))
                        continue
            else:
                try:
                    device = int(arguments.device, 0)
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Setting device ID of device %i to %s.") % (device, device_id))
                try:
                    dbus_iface.DeviceSetOption(device, "device-id", device_id)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to set device ID of device %i to %s: %s") % (device, device_id, e))


        # Get device ID
        else:
            # Particular device vs. all devices
            if arguments.device == "all":
                try:
                    num_devices = dbus_iface.GetNumberOfDevices()
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get number of devices: %s") % (e))

                print_header(_("Devices' IDs:"))
                print("%-5s %s" % (_("DEV"), _("DEVICE ID")))

                for device in range(0, num_devices):
                    try:
                        values = dbus_iface.DeviceGetOption(device, "device-id")
                        device_id = map(str, values)
                    except dbus.DBusException as e:
                        print_warning(_("Failed to get device ID of device %i: %s") % (device, e))
                        continue

                    print("%-5s %s" % (device, device_id))
            else:
                try:
                    device = int(arguments.device, 0)
                    values = dbus_iface.DeviceGetOption(device, "device-id")
                    device_id = map (str, values)
                except dbus.DBusException as e:
                    raise CDEmuError(_("Failed to get device ID of device %i: %s") % (device, e))
                except ValueError:
                    raise CDEmuError(_("String '%s' is not a number") % (arguments.device))

                print(_("Device ID of device %i: %s") % (device, device_id))


########################################################################
#                          Enumerate parsers                           #
########################################################################
class cmd_enum_parsers (object):
    def __init__ (self, subparsers):
        name = "enum-parsers"
        description_msg = _("")
        help_msg = _("enumerates supported parsers")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Display supported parsers
        try:
            parsers = dbus_iface.EnumSupportedParsers()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported parsers: %s") % (e))
            return False

        # Print all parsers
        print_header(_("Supported parsers:"))
        for info in parsers:
            print("  %s: %s" % (info[0], info[1]))
            for description, mime_type in info[2]:
                print("    %s: %s" % (mime_type, description))


########################################################################
#                           Enumerate writers                          #
########################################################################
class cmd_enum_writers (object):
    def __init__ (self, subparsers):
        name = "enum-writers"
        description_msg = _("")
        help_msg = _("enumerates supported writers")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Display supported writers
        try:
            writers = dbus_iface.EnumSupportedWriters()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported writers: %s") % (e))

        # Print all writers
        print_header(_("Supported writers:"))
        for info in writers:
            print("  %s: %s" % (info[0], info[1]))


########################################################################
#                       Enumerate filter streams                       #
########################################################################
class cmd_enum_filter_streams (object):
    def __init__ (self, subparsers):
        name = "enum-filter-streams"
        description_msg = _("")
        help_msg = _("enumerates supported filter streams")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Display supported filter streams
        try:
            filter_streams = dbus_iface.EnumSupportedFilterStreams()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported filter streams: %s") % (e))

        # Print all filter streams
        print_header(_("Supported filter streams:"))
        for info in filter_streams:
            print("  %s: %s" % (info[0], info[1]))
            print(_("    write support: %d") % (info[2]))
            for description, mime_type in info[3]:
                print("    %s: %s" % (mime_type, description))


########################################################################
#                     Enumerate daemon debug masks                     #
########################################################################
class cmd_enum_daemon_debug_masks (object):
    def __init__ (self, subparsers):
        name = "enum-daemon-debug-masks"
        description_msg = _("")
        help_msg = _("enumerates valid daemon debug masks")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Print module's debug masks
        try:
            debug_masks = dbus_iface.EnumDaemonDebugMasks()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported daemon debug masks: %s") % (e))

        print_header(_("Supported daemon debug masks:"))
        for debug_mask in debug_masks:
            print("  %-25s: 0x%04X" % (debug_mask[0], debug_mask[1]))


########################################################################
#                     Enumerate library debug masks                    #
########################################################################
class cmd_enum_library_debug_masks (object):
    def __init__ (self, subparsers):
        name = "enum-library-debug-masks"
        description_msg = _("")
        help_msg = _("enumerates valid library debug masks")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Print module's debug masks
        try:
            debug_masks = dbus_iface.EnumLibraryDebugMasks()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported library debug masks: %s") % (e))

        print_header(_("Supported library debug masks:"))
        for debug_mask in debug_masks:
            print("  %-25s: 0x%04X" % (debug_mask[0], debug_mask[1]))


########################################################################
#                      Enumerate writer parameters                     #
########################################################################
class cmd_enum_writer_parameters (object):
    def __init__ (self, subparsers):
        name = "enum-writer-params"
        description_msg = _("")
        help_msg = _("prints the list of writer's parameters")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

        parser.add_argument("writer", type=str, help=_("writer ID"))

    def __call__ (self, dbus_iface, arguments):
        # Enumerate supported writers to get their parameter sheets
        try:
            writers = dbus_iface.EnumSupportedWriters()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to enumerate supported writers: %s") % (e))

        for writer in writers:
            if writer[0] == arguments.writer:
                break
        else:
            raise CDEmuError(_("Unsupported writer: %s") % (arguments.writer))

        try:
            # Parse XML parameter sheet
            parameters = elementtree.fromstring(writer[2])
        except Exception as e:
            raise CDEmuError(_("Failed to parse parameter sheet: %s") % (e))

        print_header(_("Parameters for %s:" % (writer[1])))

        for parameter in parameters.iter("parameter"):
            print("")
            print_header("%s:" % (parameter.find("name").text))
            print(_("  ID: %s") % (parameter.find("id").text))
            print(_("  Description: %s") % (parameter.find("description").text))
            print(_("  Type: %s") % (parameter.find("type").text))
            print(_("  Default value: %s") % (parameter.find("default").text))

            for enum_value in parameter.iter("enum"):
                print(_("  Possible value: %s") % (enum_value.text))


########################################################################
#                               Version                                #
########################################################################
class cmd_version (object):
    def __init__ (self, subparsers):
        name = "version"
        description_msg = "Displays daemon and library version information."
        help_msg = _("displays version information")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        # Print version information
        try:
            library_version = dbus_iface.GetLibraryVersion()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to get library version: %s") % (e))

        try:
            daemon_version = dbus_iface.GetDaemonVersion()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to get daemon version: %s") % (e))

        print(_("Library version: %s") % (str(library_version)))
        print(_("Daemon version: %s")  % (str(daemon_version)))


########################################################################
#                              Add device                              #
########################################################################
class cmd_add_device (object):
    def __init__ (self, subparsers):
        name = "add-device"
        description_msg = _("")
        help_msg = _("creates another virtual device")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        try:
            dbus_iface.AddDevice()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to add device: %s") % (e))

        print(_("Device added successfully."))


########################################################################
#                            Remove device                             #
########################################################################
class cmd_remove_device (object):
    def __init__ (self, subparsers):
        name = "remove-device"
        description_msg = _("")
        help_msg = _("removes the last virtual device")

        parser = subparsers.add_parser(name, description=description_msg, help=help_msg, formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
        parser.set_defaults(command_function=self)

    def __call__ (self, dbus_iface, arguments):
        try:
            dbus_iface.RemoveDevice()
        except dbus.DBusException as e:
            raise CDEmuError(_("Failed to remove device: %s") % (e))

        print(_("Device removed successfuly."))


########################################################################
#                         Command-line parser                          #
########################################################################
class CDEmuCommandLineParser (argparse.ArgumentParser):
    def error (self, message):
        self.print_usage(sys.stderr)
        print_error(message)
        sys.exit(2)

class ActionDeviceId (argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
         print("%r %r %r" % (namespace, values, option_string))
         setattr(namespace, self.dest, values)

def create_parser ():
    parser = CDEmuCommandLineParser(description=_("Command-line CDEmu client."), formatter_class=argparse.ArgumentDefaultsHelpFormatter, argument_default=argparse.SUPPRESS)
    parser.add_argument("--bus", metavar="BUS", choices=["system", "session"], help=_("sets D-BUS bus type to use"))
    parser.add_argument("--version", action="version", version="%s %s - (C) Rok Mandeljc" % (app_name, app_version))

    subparsers = parser.add_subparsers(title=_("valid commands"), metavar="command", help=_("command help"))

    # Command sub-parsers
    cmd_load(subparsers) # Load
    cmd_create_blank(subparsers) # Create blank
    cmd_unload(subparsers) # Unload
    cmd_display_status(subparsers) # Status
    cmd_add_device(subparsers) # Add device
    cmd_remove_device(subparsers) # Remove device
    cmd_device_mapping(subparsers) # Device mapping
    cmd_daemon_debug_mask(subparsers) # Daemon debug mask
    cmd_library_debug_mask(subparsers) # Library debug mask
    cmd_dpm_emulation(subparsers) # DPM emulation
    cmd_tr_emulation(subparsers) # TR emulation
    cmd_bad_sector_emulation(subparsers) # Bad sector emulation
    cmd_device_id(subparsers) # Device ID
    cmd_enum_parsers(subparsers) # Enumerate parsers
    cmd_enum_writers(subparsers) # Enumerate writers
    cmd_enum_filter_streams(subparsers) # Enumerate filter streams
    cmd_enum_daemon_debug_masks(subparsers) # Enumerate daemon debug masks
    cmd_enum_library_debug_masks(subparsers) # Enumerate library debug masks
    cmd_enum_writer_parameters(subparsers) # Enumerate writer parameters
    cmd_version(subparsers) # Version

    return parser


########################################################################
#                          D-Bus connection                            #
########################################################################
def connect_to_daemon (bus_type):
    try:
        if bus_type == "system":
            dbus_bus = dbus.SystemBus()
        elif bus_type == "session":
            dbus_bus = dbus.SessionBus()
        else:
            print_warning(_("Invalid bus parameter '%s', using default!") % (bus_type))
            dbus_bus = dbus.SessionBus() # Use session bus by default

        dbus_proxy = dbus_bus.get_object("net.sf.cdemu.CDEmuDaemon", "/Daemon")
        dbus_iface = dbus.Interface(dbus_proxy, "net.sf.cdemu.CDEmuDaemon")
    except dbus.DBusException as e:
        raise CDEmuError(_("Failed to connect to CDEmu daemon: %s") % (e))

    # Get daemon interface version
    try:
        interface_version = dbus_iface.GetDaemonInterfaceVersion()
    except dbus.DBusException as e:
        raise CDEmuError(_("Failed to acquire daemon interface version (this most likely means your daemon is out-of-date): %s") % (e))

    # Check daemon interface version
    if interface_version != supported_daemon_interface_version:
        raise CDEMuError(_("CDEmu daemon interface version %i detected, but version %i is required!") % (interface_version, supported_daemon_interface_version))

    return dbus_iface


########################################################################
#                               Main                                   #
########################################################################
def main ():
    bus_type = "session" # Use session bus as hard-coded default

    # *** Parse config file, if available ***
    # Load options; Try "~/.cdemu-client" first, then try "/etc/cdemu-client.conf" next.
    paths = (os.path.expanduser("~/.cdemu-client"), "/etc/cdemu-client.conf")
    for path in paths:
        if os.path.exists(path):
            break
    else:
        path = None

    if path is not None:
        try:
            config = configparser.ConfigParser()
            config.read(path)

            # Read default bus type
            if config.has_option("defaults", "bus"):
                bus_type = config.get("defaults", "bus")
        except configparser.Error as e:
            # No harm, just print a warning
            print_warning(_("Failed to load configuration from file '%s': %s") % (path, e))

    # *** Parse command-line ***
    arguments = create_parser().parse_args()

    # Do we need to override bus type?
    if hasattr(arguments, "bus"):
        bus_type = arguments.bus

    # *** Connect to daemon ***
    dbus_iface = connect_to_daemon(bus_type)

    # *** Execute command ***
    arguments.command_function(dbus_iface, arguments)

if __name__ == "__main__":
    try:
        main()
        sys.exit(0)
    except CDEmuError as e:
        print_error(e)
        sys.exit(-1)
