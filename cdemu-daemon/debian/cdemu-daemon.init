#!/bin/sh
#
# cdemu-daemon: CDEmu daemon
#

### BEGIN INIT INFO
# Provides:          cdemu-daemon
# Required-Start:    $syslog dbus pulseaudio
# Required-Stop:     $syslog dbus pulseaudio
# Should-Start:      dbus
# Should-Stop:       dbus
# Default-Start:     2 3 4 5
# Default-Stop:      1
# Short-Description: Start the CDEmu daemon
# Description:       System mode startup script for
#                    the CDEmu daemon.
### END INIT INFO

PATH="/sbin:/bin:/usr/sbin:/usr/bin"
NAME="cdemud"
DESC="CDEmu daemon"

# Source function library.
test -f /lib/lsb/init-functions && . /lib/lsb/init-functions
test -f /etc/default/rcS && . /etc/default/rcS

# Source config
test -f /etc/default/cdemu-daemon && . /etc/default/cdemu-daemon

wait_for_vhba()
{
    if [ -n "${CTL_DEVICE}" ]; then
        log_action_begin_msg "Waiting for ${CTL_DEVICE} to be created"

        CTL_WAIT=30 # Wait at most 30 seconds
        RETVAL=1
        until [ ${CTL_WAIT} -eq 0 ]; do
            if [ -c "${CTL_DEVICE}" ]; then
                CTL_WAIT=0
                RETVAL=0
            else
                CTL_WAIT=$((CTL_WAIT-1))
                sleep 1
            fi
        done

        log_action_end_msg ${RETVAL}
        if [ ${RETVAL} -ne 0 ]; then
            return ${RETVAL}
        fi
    fi
}

start() 
{
    # Figure out if daemon should be loaded system-wide or at session login.
    if [ "${LOAD_DAEMON}" != "1" ]; then
        log_warning_msg "Note: The daemon is configured not to start at system startup."
        RETVAL=0
        return ${RETVAL}
    fi

    # Wait until vhba's control device is created
    wait_for_vhba
    RETVAL=$?
    if [ ${RETVAL} -ne 0 ]; then
        return ${RETVAL}
    fi

    # Daemon arguments
    DAEMON_ARGS="--daemonize"
    
    if [ -n "${DEVICES}" ]; then
        DAEMON_ARGS="${DAEMON_ARGS} --num-devices=${DEVICES}"
    fi
    if [ -n "${AUDIO_DRIVER}" ]; then
        DAEMON_ARGS="${DAEMON_ARGS} --audio-driver=${AUDIO_DRIVER}"
    fi

    # Start daemon
    log_action_begin_msg "Starting ${NAME} daemon"
    start-stop-daemon --start --quiet --exec ${DAEMON} -- ${DAEMON_ARGS} >/dev/null 2>&1
    RETVAL=$?
    log_action_end_msg ${RETVAL}
    
    return ${RETVAL}
}

stop() 
{
    # Figure out if daemon was loaded system-wide or at session login.
    if [ "${LOAD_DAEMON}" = "1" ]; then
        # Stopping daemon
        log_action_begin_msg "Stopping ${NAME} daemon"
        start-stop-daemon --stop --retry=1 --quiet --oknodo --exec ${DAEMON} >/dev/null 2>&1
        RETVAL=$?
        log_action_end_msg ${RETVAL}
    
        if [ ${RETVAL} -ne 0 ]; then
            return ${RETVAL}
        fi
    fi
    
    return ${RETVAL}
}



# See how we were called.
case "$1" in
    "start")
        log_daemon_msg "Starting ${DESC}"
        start
	RETVAL=$?
        log_end_msg ${RETVAL}
        ;;
    "stop")
        log_daemon_msg "Stopping ${DESC}"
        stop
        RETVAL=$?
        log_end_msg ${RETVAL}
        ;;
    "restart")
        $0 stop
        if [ $? -eq 0 ]; then
            sleep 2 
            $0 start
        fi
        ;;
    "force-reload" | "reload")
        log_warning_msg "Warning: Not implemented"
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|force-reload|reload}"
        ;;
esac

exit ${RETVAL}

