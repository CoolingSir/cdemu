<!-- ##### SECTION Title ##### -->
Main libMirage functions

<!-- ##### SECTION Short_Description ##### -->
Main libMirage functions

<!-- ##### SECTION Long_Description ##### -->
<para>
These functions represent the core of the libMirage API.
</para>

<para>
Before libMirage is used, it must be initialized using mirage_init(). This initializes the plugin
system and loads the image parser and data fragment plugins. When library is no longer needed, it
can be shut down using mirage_shutdown(), which frees the plugin data.
</para>

<para>
If libMirage is not initializes, the calls to all its functions will fail. You could still create basic
objects, such as #MirageDisc or #MirageSession, using GLib's g_object_new(), however some of the objects'
function implementations rely on initialized libMirage library and therefore their behavior would be incorrect.
</para>

<para>
The password callback function can be set using libmirage mirage_set_password_function(), which stores
a #MiragePasswordFunction callback function and user data for the callback to be called with. The password
callback function is used by mirage_obtain_password(), which is usually called by image parser
implementation which is trying to load an encrypted image and needs password to do so.
</para>

<para>
Image file(s) can be loaded using mirage_create_disc(), which (if loading succeeded) returns a #MirageDisc
object representing the disc stored in the image file(s). Function mirage_create_fragment() creates a fragment
implementation - this function is usually used by image parsers.
</para>

<para>
Supported image parsers and fragments can be enumerated using mirage_for_each_parser() and mirage_for_each_fragment(),
respectively. The list of supported debug masks can be obtained using mirage_get_supported_debug_masks().
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### USER_FUNCTION MirageCallbackFunction ##### -->
<para>

</para>

@data: 
@user_data: 
@Returns: 


<!-- ##### USER_FUNCTION MiragePasswordFunction ##### -->
<para>

</para>

@user_data: 
@Returns: 


<!-- ##### STRUCT MirageDebugMask ##### -->
<para>

</para>

@name: 
@value: 

<!-- ##### FUNCTION mirage_initialize ##### -->
<para>

</para>

@error: 
@Returns: 


<!-- ##### FUNCTION mirage_shutdown ##### -->
<para>

</para>

@error: 
@Returns: 


<!-- ##### FUNCTION mirage_set_password_function ##### -->
<para>

</para>

@func: 
@user_data: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_obtain_password ##### -->
<para>

</para>

@error: 
@Returns: 


<!-- ##### FUNCTION mirage_create_disc ##### -->
<para>

</para>

@filenames: 
@debug_context: 
@params: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_create_fragment ##### -->
<para>

</para>

@fragment_interface: 
@stream: 
@debug_context: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_create_file_stream ##### -->
<para>

</para>

@filename: 
@debug_context: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_get_file_stream_filename ##### -->
<para>

</para>

@stream: 
@Returns: 


<!-- ##### FUNCTION mirage_for_each_parser ##### -->
<para>

</para>

@func: 
@user_data: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_for_each_fragment ##### -->
<para>

</para>

@func: 
@user_data: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_for_each_file_filter ##### -->
<para>

</para>

@func: 
@user_data: 
@error: 
@Returns: 


<!-- ##### FUNCTION mirage_get_supported_debug_masks ##### -->
<para>

</para>

@masks: 
@num_masks: 
@error: 
@Returns: 


